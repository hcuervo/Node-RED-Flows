[{"id":"f3344157.422cd","type":"template","z":"ef153be.acb2448","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"\n<!DOCTYPE html>\n<meta charset=\"utf-8\">\n<title>Node-RED Wordcloud</title>\n<body align=middle>\n<script src=\"http://d3js.org/d3.v3.min.js\"></script>\n<script src=\"d3.layout.cloud.js\"></script>\n<script>\n\nfunction wordCloud(selector) {\n\n  var fill = d3.scale.category20b();\n\n  var svg = d3.select(selector).append(\"svg\")\n              .attr(\"width\", 1024)\n              .attr(\"height\", 768)\n              .append(\"g\")\n              .attr(\"transform\", \"translate(512,384)\");\n\n  function draw(words) {\n    //Use the 'text' attribute (the word itself) to identity unique elements.\n    var cloud = svg.selectAll(\"g text\")\n                    .data(words, function(d) { return d.text; })\n\n    //Entering words\n    cloud.enter()\n          .append(\"text\")\n          .style(\"font-family\", \"Lucida Grande\")\n          .style(\"fill\", function(d, i) { return fill(i); })\n          .attr(\"text-anchor\", \"middle\")\n          .attr('font-size', 2)\n          .text(function(d) { return d.text; });\n\n    //Entering and existing words\n    cloud.transition()\n          .duration(300)\n          .style(\"font-size\", function(d) { return d.size + \"px\"; })\n          .attr(\"transform\", function(d) {\n            return \"translate(\" + [d.x, d.y] + \")rotate(\" + d.rotate + \")\";\n          })\n          .style(\"fill-opacity\", 1);\n\n    //Exiting words\n    cloud.exit()\n          .transition()\n          .duration(150)\n          .style('fill-opacity', 1e-6)\n          .attr('font-size', 1)\n          .remove();\n  }\n\n  return {\n      //Recompute the word cloud for a new set of words. This method will\n      // asynchronously call draw when the layout has been computed.\n      update: function(words) {\n          d3.layout.cloud().size([1024, 768])\n              .words(words)\n              .padding(2)\n              .rotate(function() { return ~~(Math.random() * -2) * 90; })\n              //.rotate(function(d) { return ~~(Math.random() * 5) * 30 - 60; })\n              .font(\"Lucida Grande\")\n              .fontSize(function(d) { return d.size; })\n              .on(\"end\", draw)\n              .start();\n      }\n  }\n\n}\n\nvar myWordCloud = wordCloud('body');\n\nvar ws;\nvar server = window.location.hostname;\nvar wsUri = \"ws://\"+server+\"/ws/wordcloud\";\n\nfunction start(wsUri) {  // Create the websocket\n    ws = new WebSocket(wsUri);\n\n    ws.onopen = function(evt) {\n        console.log(\"CONNECTED\");\n        //document.getElementById(\"foot\").innerHTML = \"<font color='#494'>\"+ibmfoot+\"</font>\";\n        //ws.send(\"Open for mapping\");\n    };\n\n    ws.onclose = function(evt) {\n        console.log(\"DISCONNECTED\");\n        //document.getElementById(\"foot\").innerHTML = \"<font color='#944'>\"+ibmfoot+\"</font>\";\n        setTimeout(function(){ start(wsUri) }, 3000); // try to reconnect every 3 secs... bit fast ?\n    }\n\n    // This expects a websocket message with data as a stringified object \n    ws.onmessage = function (evt) {\n        // console.log(\"DATA\",evt.data);\n        var wds = JSON.parse(evt.data);\n        \n        for (var key in wds) {\n            wds[key].size=wds[key].size * 25 + 5;\n        }\n        myWordCloud.update(wds);\n        \n        \n        keysSorted = Object.keys(wds).sort(function(a,b){return wds[a]-wds[b]});\n        // console.log(keysSorted);\n\n    }\n\n    ws.onerror = function(evt) {\n        console.log(\"ERROR\",evt);\n        //document.getElementById(\"foot\").innerHTML = \"<font color='#f00'>\"+ibmfoot+\"</font>\";\n    }\n}\n\nstart(wsUri);\n</script>\n</body>\n","x":627.75,"y":132.75,"wires":[["7cc63224.2aea7c"]]},{"id":"29439ed5.db8742","type":"http in","z":"ef153be.acb2448","name":"","url":"/wc","method":"get","swaggerDoc":"","x":257.75,"y":132.75,"wires":[["f3344157.422cd"]]},{"id":"7cc63224.2aea7c","type":"http response","z":"ef153be.acb2448","name":"","x":927.75,"y":132.75,"wires":[]},{"id":"ed4d1739.a1e4d","type":"http in","z":"ef153be.acb2448","name":"","url":"/d3.layout.cloud.js","method":"get","swaggerDoc":"","x":307.75,"y":272.75,"wires":[["81e1fd88.dc17"]]},{"id":"81e1fd88.dc17","type":"template","z":"ef153be.acb2448","name":"","field":"payload","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"// Word cloud layout by Jason Davies, http://www.jasondavies.com/word-cloud/\n// Algorithm due to Jonathan Feinberg, http://static.mrfeinberg.com/bv_ch03.pdf\n(function(exports) {\n    function cloud() {\n        var size = [256, 256],\n            text = cloudText,\n            font = cloudFont,\n            fontSize = cloudFontSize,\n            fontStyle = cloudFontNormal,\n            fontWeight = cloudFontNormal,\n            rotate = cloudRotate,\n            padding = cloudPadding,\n            spiral = archimedeanSpiral,\n            words = [],\n            timeInterval = Infinity,\n            event = d3.dispatch(\"word\", \"end\"),\n            timer = null,\n            cloud = {};\n\n        cloud.start = function() {\n            var board = zeroArray((size[0] >> 5) * size[1]),\n                bounds = null,\n                n = words.length,\n                i = -1,\n                tags = [],\n                data = words.map(function(d, i) {\n                    d.text = text.call(this, d, i);\n                    d.font = font.call(this, d, i);\n                    d.style = fontStyle.call(this, d, i);\n                    d.weight = fontWeight.call(this, d, i);\n                    d.rotate = rotate.call(this, d, i);\n                    d.size = ~~fontSize.call(this, d, i);\n                    d.padding = padding.call(this, d, i);\n                    return d;\n                }).sort(function(a, b) { return b.size - a.size; });\n\n            if (timer) clearInterval(timer);\n            timer = setInterval(step, 0);\n            step();\n\n            return cloud;\n\n            function step() {\n                var start = +new Date,\n                    d;\n                while (+new Date - start < timeInterval && ++i < n && timer) {\n                    d = data[i];\n                    d.x = (size[0] * (Math.random() + .5)) >> 1;\n                    d.y = (size[1] * (Math.random() + .5)) >> 1;\n                    cloudSprite(d, data, i);\n                    if (d.hasText && place(board, d, bounds)) {\n                        tags.push(d);\n                        event.word(d);\n                        if (bounds) cloudBounds(bounds, d);\n                        else bounds = [{x: d.x + d.x0, y: d.y + d.y0}, {x: d.x + d.x1, y: d.y + d.y1}];\n                        // Temporary hack\n                        d.x -= size[0] >> 1;\n                        d.y -= size[1] >> 1;\n                    }\n                }\n                if (i >= n) {\n                    cloud.stop();\n                    event.end(tags, bounds);\n                }\n            }\n        }\n\n        cloud.stop = function() {\n            if (timer) {\n                clearInterval(timer);\n                timer = null;\n            }\n            return cloud;\n        };\n\n        cloud.timeInterval = function(x) {\n            if (!arguments.length) return timeInterval;\n            timeInterval = x == null ? Infinity : x;\n            return cloud;\n        };\n\n        function place(board, tag, bounds) {\n            var perimeter = [{x: 0, y: 0}, {x: size[0], y: size[1]}],\n                startX = tag.x,\n                startY = tag.y,\n                maxDelta = Math.sqrt(size[0] * size[0] + size[1] * size[1]),\n                s = spiral(size),\n                dt = Math.random() < .5 ? 1 : -1,\n                t = -dt,\n                dxdy,\n                dx,\n                dy;\n\n            while (dxdy = s(t += dt)) {\n                dx = ~~dxdy[0];\n                dy = ~~dxdy[1];\n\n                if (Math.min(dx, dy) > maxDelta) break;\n\n                tag.x = startX + dx;\n                tag.y = startY + dy;\n\n                if (tag.x + tag.x0 < 0 || tag.y + tag.y0 < 0 ||\n                    tag.x + tag.x1 > size[0] || tag.y + tag.y1 > size[1]) continue;\n                // TODO only check for collisions within current bounds.\n                if (!bounds || !cloudCollide(tag, board, size[0])) {\n                    if (!bounds || collideRects(tag, bounds)) {\n                        var sprite = tag.sprite,\n                            w = tag.width >> 5,\n                            sw = size[0] >> 5,\n                            lx = tag.x - (w << 4),\n                            sx = lx & 0x7f,\n                            msx = 32 - sx,\n                            h = tag.y1 - tag.y0,\n                            x = (tag.y + tag.y0) * sw + (lx >> 5),\n                            last;\n                        for (var j = 0; j < h; j++) {\n                            last = 0;\n                            for (var i = 0; i <= w; i++) {\n                                board[x + i] |= (last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0);\n                            }\n                            x += sw;\n                        }\n                        delete tag.sprite;\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }\n\n        cloud.words = function(x) {\n            if (!arguments.length) return words;\n            words = x;\n            return cloud;\n        };\n\n        cloud.size = function(x) {\n            if (!arguments.length) return size;\n            size = [+x[0], +x[1]];\n            return cloud;\n        };\n\n        cloud.font = function(x) {\n            if (!arguments.length) return font;\n            font = d3.functor(x);\n            return cloud;\n        };\n\n        cloud.fontStyle = function(x) {\n            if (!arguments.length) return fontStyle;\n            fontStyle = d3.functor(x);\n            return cloud;\n        };\n\n        cloud.fontWeight = function(x) {\n            if (!arguments.length) return fontWeight;\n            fontWeight = d3.functor(x);\n            return cloud;\n        };\n\n        cloud.rotate = function(x) {\n            if (!arguments.length) return rotate;\n            rotate = d3.functor(x);\n            return cloud;\n        };\n\n        cloud.text = function(x) {\n            if (!arguments.length) return text;\n            text = d3.functor(x);\n            return cloud;\n        };\n\n        cloud.spiral = function(x) {\n            if (!arguments.length) return spiral;\n            spiral = spirals[x + \"\"] || x;\n            return cloud;\n        };\n\n        cloud.fontSize = function(x) {\n            if (!arguments.length) return fontSize;\n            fontSize = d3.functor(x);\n            return cloud;\n        };\n\n        cloud.padding = function(x) {\n            if (!arguments.length) return padding;\n            padding = d3.functor(x);\n            return cloud;\n        };\n\n        return d3.rebind(cloud, event, \"on\");\n    }\n\n    function cloudText(d) {\n        return d.text;\n    }\n\n    function cloudFont() {\n        return \"serif\";\n    }\n\n    function cloudFontNormal() {\n        return \"normal\";\n    }\n\n    function cloudFontSize(d) {\n        return Math.sqrt(d.value);\n    }\n\n    function cloudRotate() {\n        return (~~(Math.random() * 6) - 3) * 30;\n    }\n\n    function cloudPadding() {\n        return 1;\n    }\n\n    // Fetches a monochrome sprite bitmap for the specified text.\n    // Load in batches for speed.\n    function cloudSprite(d, data, di) {\n        if (d.sprite) return;\n        c.clearRect(0, 0, (cw << 5) / ratio, ch / ratio);\n        var x = 0,\n            y = 0,\n            maxh = 0,\n            n = data.length;\n        --di;\n        while (++di < n) {\n            d = data[di];\n            c.save();\n            c.font = d.style + \" \" + d.weight + \" \" + ~~((d.size + 1) / ratio) + \"px \" + d.font;\n            var w = c.measureText(d.text + \"m\").width * ratio,\n                h = d.size << 1;\n            if (d.rotate) {\n                var sr = Math.sin(d.rotate * cloudRadians),\n                    cr = Math.cos(d.rotate * cloudRadians),\n                    wcr = w * cr,\n                    wsr = w * sr,\n                    hcr = h * cr,\n                    hsr = h * sr;\n                w = (Math.max(Math.abs(wcr + hsr), Math.abs(wcr - hsr)) + 0x1f) >> 5 << 5;\n                h = ~~Math.max(Math.abs(wsr + hcr), Math.abs(wsr - hcr));\n            } else {\n                w = (w + 0x1f) >> 5 << 5;\n            }\n            if (h > maxh) maxh = h;\n            if (x + w >= (cw << 5)) {\n                x = 0;\n                y += maxh;\n                maxh = 0;\n            }\n            if (y + h >= ch) break;\n            c.translate((x + (w >> 1)) / ratio, (y + (h >> 1)) / ratio);\n            if (d.rotate) c.rotate(d.rotate * cloudRadians);\n            c.fillText(d.text, 0, 0);\n            if (d.padding) c.lineWidth = 2 * d.padding, c.strokeText(d.text, 0, 0);\n            c.restore();\n            d.width = w;\n            d.height = h;\n            d.xoff = x;\n            d.yoff = y;\n            d.x1 = w >> 1;\n            d.y1 = h >> 1;\n            d.x0 = -d.x1;\n            d.y0 = -d.y1;\n            d.hasText = true;\n            x += w;\n        }\n        var pixels = c.getImageData(0, 0, (cw << 5) / ratio, ch / ratio).data,\n            sprite = [];\n        while (--di >= 0) {\n            d = data[di];\n            if (!d.hasText) continue;\n            var w = d.width,\n                w32 = w >> 5,\n                h = d.y1 - d.y0;\n            // Zero the buffer\n            for (var i = 0; i < h * w32; i++) sprite[i] = 0;\n            x = d.xoff;\n            if (x == null) return;\n            y = d.yoff;\n            var seen = 0,\n                seenRow = -1;\n            for (var j = 0; j < h; j++) {\n                for (var i = 0; i < w; i++) {\n                    var k = w32 * j + (i >> 5),\n                        m = pixels[((y + j) * (cw << 5) + (x + i)) << 2] ? 1 << (31 - (i % 32)) : 0;\n                    sprite[k] |= m;\n                    seen |= m;\n                }\n                if (seen) seenRow = j;\n                else {\n                    d.y0++;\n                    h--;\n                    j--;\n                    y++;\n                }\n            }\n            d.y1 = d.y0 + seenRow;\n            d.sprite = sprite.slice(0, (d.y1 - d.y0) * w32);\n        }\n    }\n\n    // Use mask-based collision detection.\n    function cloudCollide(tag, board, sw) {\n        sw >>= 5;\n        var sprite = tag.sprite,\n            w = tag.width >> 5,\n            lx = tag.x - (w << 4),\n            sx = lx & 0x7f,\n            msx = 32 - sx,\n            h = tag.y1 - tag.y0,\n            x = (tag.y + tag.y0) * sw + (lx >> 5),\n            last;\n        for (var j = 0; j < h; j++) {\n            last = 0;\n            for (var i = 0; i <= w; i++) {\n                if (((last << msx) | (i < w ? (last = sprite[j * w + i]) >>> sx : 0))\n                    & board[x + i]) return true;\n            }\n            x += sw;\n        }\n        return false;\n    }\n\n    function cloudBounds(bounds, d) {\n        var b0 = bounds[0],\n            b1 = bounds[1];\n        if (d.x + d.x0 < b0.x) b0.x = d.x + d.x0;\n        if (d.y + d.y0 < b0.y) b0.y = d.y + d.y0;\n        if (d.x + d.x1 > b1.x) b1.x = d.x + d.x1;\n        if (d.y + d.y1 > b1.y) b1.y = d.y + d.y1;\n    }\n\n    function collideRects(a, b) {\n        return a.x + a.x1 > b[0].x && a.x + a.x0 < b[1].x && a.y + a.y1 > b[0].y && a.y + a.y0 < b[1].y;\n    }\n\n    function archimedeanSpiral(size) {\n        var e = size[0] / size[1];\n        return function(t) {\n            return [e * (t *= .1) * Math.cos(t), t * Math.sin(t)];\n        };\n    }\n\n    function rectangularSpiral(size) {\n        var dy = 4,\n            dx = dy * size[0] / size[1],\n            x = 0,\n            y = 0;\n        return function(t) {\n            var sign = t < 0 ? -1 : 1;\n            // See triangular numbers: T_n = n * (n + 1) / 2.\n            switch ((Math.sqrt(1 + 4 * sign * t) - sign) & 3) {\n                case 0:  x += dx; break;\n                case 1:  y += dy; break;\n                case 2:  x -= dx; break;\n                default: y -= dy; break;\n            }\n            return [x, y];\n        };\n    }\n\n    // TODO reuse arrays?\n    function zeroArray(n) {\n        var a = [],\n            i = -1;\n        while (++i < n) a[i] = 0;\n        return a;\n    }\n\n    var cloudRadians = Math.PI / 180,\n        cw = 1 << 11 >> 5,\n        ch = 1 << 11,\n        canvas,\n        ratio = 1;\n\n    if (typeof document !== \"undefined\") {\n        canvas = document.createElement(\"canvas\");\n        canvas.width = 1;\n        canvas.height = 1;\n        ratio = Math.sqrt(canvas.getContext(\"2d\").getImageData(0, 0, 1, 1).data.length >> 2);\n        canvas.width = (cw << 5) / ratio;\n        canvas.height = ch / ratio;\n    } else {\n        // node-canvas support\n        var Canvas = require(\"canvas\");\n        canvas = new Canvas(cw << 5, ch);\n    }\n\n    var c = canvas.getContext(\"2d\"),\n        spirals = {\n            archimedean: archimedeanSpiral,\n            rectangular: rectangularSpiral\n        };\n    c.fillStyle = c.strokeStyle = \"red\";\n    c.textAlign = \"center\";\n\n    exports.cloud = cloud;\n})(typeof exports === \"undefined\" ? d3.layout || (d3.layout = {}) : exports);","x":557.75,"y":272.75,"wires":[["b4431681.37f128"]]},{"id":"faf32446.948478","type":"http response","z":"ef153be.acb2448","name":"","x":937.75,"y":272.75,"wires":[]},{"id":"b4431681.37f128","type":"function","z":"ef153be.acb2448","name":"text/js","func":"msg.headers={\n    \"Content-Type\": \"text/js\"\n}\nreturn msg;","outputs":1,"noerr":0,"x":757.75,"y":272.75,"wires":[["faf32446.948478"]]},{"id":"2d230605.0f6d82","type":"function","z":"ef153be.acb2448","name":"Filter Tweets","func":"\nvar tweets = context.tweets || [\"\"];\n\n\n\tvar foo = msg.tweet.text;\n// ************** original ****************\n//\tif (foo.indexOf(\"http\") != -1) {\n//\t\tfoo = (foo.split(\"http\"))[0];\n//\t}\n//\tif (foo.toLowerCase().indexOf(\"job\") != -1) return null;\n//  foo = foo.replace(/[^\\x00-\\x7F]/g, \"\");\n// ************** original ****************\n\n// *********** inicio  de modificacion **********\n\tvar ht = msg.tweet.entities.hashtags;\n    var t = \"\";\n    for (var i=0; i<ht.length; i++) {\n        \n        t= t + \" #\" +ht[i].text;\n    }\n   \n    foo = t;\n    \n// *********** fin de modificacion **********    \n\t\n\tif (tweets.length > 100) {\n\t    tweets.shift()\n\t}\n\t\n\tif (foo !=\"\") {\n\t    tweets.push(foo);\n\t}\n\t\n\n\tcontext.tweets = tweets;\n\t\n\tmsg.payload = tweets;\n\n\t\nreturn msg;\n","outputs":1,"noerr":0,"x":277.75,"y":386.75,"wires":[["d3f321c5.0f8b4","bdd81ca8.30c62"]]},{"id":"d3f321c5.0f8b4","type":"delay","z":"ef153be.acb2448","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"20","nbRateUnits":"","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"x":477.75,"y":386.75,"wires":[["a8ff751d.68206"]]},{"id":"a8ff751d.68206","type":"function","z":"ef153be.acb2448","name":"Count words in array","func":"var index = [{}];\nindex[0].text = \"\";\nindex[0].size = 0;\n\nvar garbage = [ \"and\", \"for\", \"but\", \"the\", \"&lt\", \"&gt\", \"his\", \"her\", \"pre\", \"are\", \"&amp\", \"with\"];\n\n//takes a string and counts the freqnecy of each word in it. Returns array of objects with tag and freq properties.\n            //words should be space separated\n            function getWordFrequency(wordString){\n\n                //convert string to lower case, trims spaces, cleans up some special chars and splits it into an array using spaces and delimiter.\n                var sWords = wordString.toLowerCase().trim().replace(/[,;.]/g,'').split(/[\\s\\/]+/g).sort();\n                var iWordsCount = sWords.length; // count w/ duplicates\n\n                // array of words to ignore\n                var ignore = '{!skipwords}'.split(',');\n                ignore = (function(){\n                    var o = {}; // object prop checking > in array checking\n                    var iCount = ignore.length;\n                    for (var i=0;i<iCount;i++){\n                        o[ignore[i]] = true;\n                    }\n                    return o;\n                }());\n\n                var counts = {}; // object for math\n                for (var i=0; i<iWordsCount; i++) {\n                    var sWord = sWords[i];\n                    if (!ignore[sWord]) {\n                        counts[sWord] = counts[sWord] || 0;\n                        counts[sWord]++;\n                    }\n                }\n\n                //get the lower bound as an integer. Lower bound controls the minimum frequnecy a word/tag can have for it to appear in the cloud\n                var lowerBound = 0;\n                var arr = []; // an array of objects to return\n                for (sWord in counts) {\n                    if(counts[sWord] > lowerBound)\n                    {\n                        arr.push({\n                            text: sWord,\n                            size: counts[sWord]\n                        });\n                    }\n                }\n\n                /* Sorting code, not really required for this purpose but kept in case it is decided that we want it for some reason.\n                // sort array by descending frequency | http://stackoverflow.com/a/8837505\n                return arr.sort(function(a,b){\n                    return (a.freq > b.freq) ? -1 : ((a.freq < b.freq) ? 1 : 0);\n                });\n                */\n\n                return arr;\n\n            }\n\nvar string = \"\";\nfor (var i in msg.payload) {\n    string = string + \" \" + msg.payload[i];\n  }\n// node.warn(string);\nvar arr2 = getWordFrequency(string);\n// node.warn(arr2);\n\nmsg.payload = JSON.stringify(arr2);\n\nreturn msg;","outputs":1,"noerr":0,"x":667.75,"y":386.75,"wires":[["f517bae9.4b2438","b8dc2312.1f8d28"]]},{"id":"f517bae9.4b2438","type":"websocket out","z":"ef153be.acb2448","name":"","server":"a402c1c8.bc6b48","client":"","x":907.75,"y":346.75,"wires":[]},{"id":"b8dc2312.1f8d28","type":"debug","z":"ef153be.acb2448","name":"","active":false,"console":"false","complete":"false","x":877.75,"y":426.75,"wires":[]},{"id":"ce42f87e.ad66f","type":"debug","z":"ef153be.acb2448","name":"","active":true,"console":"false","complete":"payload","x":270,"y":454,"wires":[]},{"id":"bdd81ca8.30c62","type":"debug","z":"ef153be.acb2448","name":"","active":false,"console":"false","complete":"false","x":477.75,"y":446.75,"wires":[]},{"id":"210978d3.7dace","type":"twitter in","z":"ef153be.acb2448","twitter":"","tags":"argentina","user":"false","name":"","topic":"tweets","x":84.00003051757812,"y":356.7500305175781,"wires":[["ce42f87e.ad66f","2d230605.0f6d82"]]},{"id":"a402c1c8.bc6b48","type":"websocket-listener","path":"/ws/wordcloud","wholemsg":"false"}]
